#!/usr/bin/env python

# Module for the transformation of FASTA files in FASTA files whose
# sequence alignment is optimized for performing Phylogenetic
# Analysis via calculation of Maximum Likelihood trees.
# This optimizer needs:
# - Tcoffee (https://github.com/cbcrg/tcoffee) configured ith
#   Mafft, Probcons, Muscle;
# - Gblocks (http://molevol.cmima.csic.es/castresana/Gblocks.html)
#

import codecs
import getopt
import subprocess
import sys
import os
import yaml
from os.path import isfile, join, abspath, dirname, basename


CONF    = 'config'
EMAIL   = 'email'
AMINO   = 'amino'
NUCLEIC = 'nucleic'
FASTA_EXT = 'fasta_aln'
FASTA_EXT__OPTIMIZED = '_gb.txt'
FASTA_EXT__FLANKED   = '_flanked.fasta'
GBLOCKS_FLANKS = "Flanks:"
GBLOCKS_FLANK_START = "["
GBLOCKS_FLANK_END   = "]"

# CLI options
cli = {}
cli[CONF] = 'config.yml'
SOPT_CONF = 'c'
SOPT_MAIL = 'e'
SOPT_AMIN = 'a'
SOPT_NUCL = 'n'
LOPT_CONF = 'config'
LOPT_MAIL = 'email'
LOPT_AMIN = 'amino'
LOPT_NUCL = 'nucleic'
TCOFFEE = 'tcoffee'
GBLOCKS = 'gblocks'


# usage
#
def print_usage():
    '''
    Prints usage
    '''
    print("Usage: " + basename(sys.argv[0]))
    print(str('\t-' + SOPT_CONF + '/--' + LOPT_CONF) +
            "\tset configuration file (defaults to \"config.yml\")")
    print(str('\t-' + SOPT_MAIL + '/--' + LOPT_MAIL) +
            "\tset user's e-mail")
    print(str('\t-' + SOPT_AMIN + '/--' + LOPT_AMIN) +
            "\tset directory holding FASTA protein sequence alignment files")
    print(str('\t-' + SOPT_NUCL + '/--' + LOPT_NUCL) +
            "\tset directory holding FASTA nucleic-acid sequence alignment files")



# read a FASTA file
#
def read_fasta(file_name):
    '''
    Reads the FASTA file at the given path and returns a dictionary
    representing the file's internal structure
    '''
    fasta = {}
    key = ''

    for line in open(file_name):
        line = line.rstrip()
        
        if line.startswith('>'):
            key = line.replace('>', '')
            fasta[key] = ''
        else:
            fasta[key] += line

    return fasta



# write a FASTA file
#
def write_fasta(fasta_dict, path):
    '''
    Writes a FASTA file from the given dictionary representation at
    the given path
    '''
    fasta = open(path, 'w')
    for key in list(fasta_dict.keys()):
        fasta.write('>' + key + '\n')
        fasta.write(fasta_dict[key] + '\n')
    fasta.close()



# return the flanks of the alignment
#
def get_flanks(aln_file):
    '''
    Returns the range positions (flanks) that optimize the alignment
    contained within the given file
    '''
    result = []

    for line in open(aln_file):
        line = line.rstrip()
        if line.startswith(GBLOCKS_FLANKS):
            line = line.replace(GBLOCKS_FLANKS, '')
            line = line.split()
            i = 0
            while i < len(line):
                line_range = line[i:(i+2)]
                min_range = int(line_range[0].replace(GBLOCKS_FLANK_START, ''))
                max_range = int(line_range[1].replace(GBLOCKS_FLANK_END, ''))
                flank = (min_range, max_range)
                result.append(flank)
                i += 2
    return result



# read a FASTA dictionary and return a flanked FASTA dictionary
#
def read_flanked_fasta(fasta, flanks):
    '''
    Returns the given FASTA dictionary that is comprised within the
    given flank regions
    '''
    result = {}

    for key in list(fasta.keys()):
        sequence = fasta[key]
        result[key] = ''
        for flank in flanks:
            result[key] += sequence[(flank[0]-1):flank[1]]

    return result



# check the presence of the given configuration binaries
#
def which(program):
    def is_exe(fpath):
        return os.path.isfile(fpath) and os.access(fpath, os.X_OK)

    fpath, fname = os.path.split(program)
    if fpath:
        if is_exe(program):
            return program
    else:
        for path in os.environ["PATH"].split(os.pathsep):
            path = path.strip('"')
            exe_file = os.path.join(path, program)
            if is_exe(exe_file):
                return exe_file

    print("Error: Program \"" + program + "\" not set or not on system path.")
    return None



# read YAML configuration file
#
def read_config_file(config_file):
    '''
    Reads the YAML configuration file without overwriting all the
    parameters from the command line call.
    '''
    try:
        conf = open(config_file, 'r')
        config = yaml.load(conf)
        
        # configuration file mandatory parameters
        cli[TCOFFEE] = config["bin"]["tcoffee"]
        cli[GBLOCKS] = config["bin"]["gblocks"]

        # command line/configuration file mandatory parameters
        # (command line has precedence over configuration file)
        if "user" in config.keys():
            if EMAIL not in list(cli.keys()):
                cli[EMAIL] = config["user"][EMAIL]

        if "directories" in list(config.keys()):
            if NUCLEIC not in cli.keys():
                directory = config["directories"][NUCLEIC]
                files = [join(directory, i) 
                        for i in os.listdir(directory) if isfile(join(directory, i))]
                cli[NUCLEIC] = files
                
            if AMINO not in list(cli.keys()):
                directory = config["directories"][AMINO]
                files = [join(directory, i) 
                        for i in os.listdir(directory) if isfile(join(directory, i))]
                cli[AMINO] = files
        conf.close()
    except yaml.YAMLError:
        print("Error: Bad syntax in " + arg + " configuration file.")
        print_usage()
        sys.exit()

    if (cli[GBLOCKS] == None) or (cli[TCOFFEE] == None):
        print_usage()
        sys.exit()



# get command line
#
def get_command_line(argv):
    '''
    Returns the configuration from the given command line arguments:
    -c/--config   configuration file
    -e/--email    the user's e-mail
    -a/--amino    directory whose files contain amino acid sequences
    -n/--nucleic  directory whose files contain nucleic acid sequences

    Provided command line options have precedence, and will overwrite
    the corresponding configuration file entries when provided.
    '''

    nucleic_files = []
    amino_files = []

    try:
        opts, args = getopt.getopt(
            argv,
            str(SOPT_CONF + ':' + SOPT_MAIL + ':' + SOPT_AMIN + ':' + SOPT_NUCL + ':'),
            [str('--' + LOPT_CONF), str('--' + LOPT_MAIL), str('--' + LOPT_AMIN), str('--' + LOPT_NUCL)])
    except getopt.GetoptError:
        print_usage()
        sys.exit()

    for opt, arg in opts:
        if opt in (str('-' + SOPT_CONF), LOPT_CONF):
            if not isfile(arg):
                print("Error: " + arg + " configuration file not found.")
                print_usage()
                sys.exit()
            else:
                cli[CONF] = arg
        if opt in (str('-' + SOPT_NUCL), LOPT_NUCL):
            nucleic_files = [join(arg, i) for i in os.listdir(arg) if isfile(join(arg, i))]
            cli[NUCLEIC] = nucleic_files
        if opt in (str('-' + SOPT_AMIN), LOPT_AMIN):
            amino_files = [join(arg, i) for i in os.listdir(arg) if isfile(join(arg, i))]
            cli[AMINO] = amino_files
        if opt in (str('-' + SOPT_MAIL), LOPT_MAIL):
            cli[EMAIL] = arg

    # read configuration file
    read_config_file(cli[CONF])

    if ((len(cli[AMINO]) + len(cli[NUCLEIC])) == 0) or (cli[EMAIL] == ''):
        print_usage()
        sys.exit()

    print str(cli)

 


# optimize the protein/nucleic-acid sequence alignment
#
def optimize_alignment(alignment_file, sequence_type):
    '''
    Writes a FASTA file containing the optimized version (Gblocks)
    of the given protein/nucleic-acid sequence alignment
    '''
    # launch Gblocks differentiating between protein sequences and
    # nucleic sequences
    if sequence_type == AMINO:
        gblocks_call = [cli[GBLOCKS],
                alignment_file, '-t=p', '-e=_gb', '-p=t', '-b4=5']
    else:
        gblocks_call = [cli[GBLOCKS],
                alignment_file, '-t=d', '-e=_gb', '-p=t', '-b4=5']
        
    fd = read_fasta(alignment_file)

    # Gblocks optimization
    subprocess.call(gblocks_call)

    # restrict the FASTA alignment with the Gblocks flanked positions
    optimized_alignment_file = alignment_file + FASTA_EXT__OPTIMIZED
    flanks = get_flanks(optimized_alignment_file)
    ofd = read_flanked_fasta(fd, flanks)

    # write the Gblocks optimized fasta alignment
    flanked_file = alignment_file + FASTA_EXT__FLANKED
    write_fasta(ofd, flanked_file)


    
# Tcoffee sequence alignment
#
def sequence_alignment(in_file):
    '''
    Performs sequence alignment of the sequences in the given fasta
    file using Tcoffee sequence alignment methods.
    '''
    parent_dir = os.getcwd()
    os.chdir(dirname(abspath(in_file)))
    in_file = basename(in_file)

    tcoffee_seqmet  = '-in=S' + in_file + ',Mmafft_msa,Mmuscle_msa,Mprobcons_msa'
    tcoffee_cpus    = '2'
    tcoffee_outfmt  = '-output=fasta'
    tcoffee_outfile = '-outfile=' + str(in_file.replace('.fas', str('.' + FASTA_EXT)))

    # Tcoffee alignment
    print '\n# Tcoffee sequence alignment on file \"' + in_file + '\"'
    print '#'
    subprocess.call([cli[TCOFFEE], tcoffee_seqmet, tcoffee_outfile,
        '-cpu', tcoffee_cpus, tcoffee_outfmt])


    # read the fasta alignment as a dictionary
    alignment_file = in_file.replace('.fas', str('.' + FASTA_EXT))
    optimize_alignment(alignment_file, NUCLEIC)

    os.chdir(parent_dir)



# Tcoffee structural alignment
#
def structural_alignment(in_file):
    '''
    Performs structural alignment of the sequences in the given fasta
    file using Tcoffee structural alignment utility.
    '''
    parent_dir = os.getcwd()
    os.chdir(dirname(abspath(in_file)))
    in_file = basename(in_file)

    # Tcoffee alignment
    print '\n# Tcoffee structural alignment on file \"' + in_file + '\"'
    print '#'
    
    # structural alignment step 1:
    #
    # Make a multiple profile alignment of all the sequences in the
    # given file using Tcoffee Psi-BLAST
    subprocess.call([cli[TCOFFEE], str('-in=S' + in_file),
        '-mode psicoffee', str('-email ' + cli[EMAIL]),
        '-multi_core', str('-output=' + FASTA_EXT)])

    # structural alignment step 2:
    #
    # Fetch candidate templates via BLAST against the PDB, and use
    # the candidate's structure to obtain the sequence alignment
    # out of the structural alignment.
    # In case of missing template is missing, proba_pair (the
    # default T-Coffee method for building libraries) is used
    # instead of SAP.
    # By default Expresso fetches only XRAY structures, but it is
    # possible to control this behavior via the flag -pdb_type=dn
    # where d for is for diffraction (X-Ray) and n for NMR.
    subprocess.call([cli[TCOFFEE], str('-in=S' + in_file),
        '-mode expresso', '-pdb_type=dn', str('-email ' + cli[EMAIL]),
        '-multi_core', str('-output=' + FASTA_EXT)])

    # structural alignment step 3:
    #
    # Refinement of the previous methods
    subprocess.call([cli[TCOFFEE], str('-in=S' + in_file),
        '-mode accurate', str('-email ' + cli[EMAIL]),
        '-multi_core', str('-output=' + FASTA_EXT)])


    # read the fasta alignment as a dictionary
    alignment_file = in_file.replace('.fas', str('.' + FASTA_EXT))
    optimize_alignment(alignment_file, AMINO)

    os.chdir(parent_dir)



if __name__ == '__main__':
    reload(sys)
    
    # get the list of nucleic/aminoacid sequence files
    get_command_line(sys.argv[1:])

    # nucleic acid sequences from non-coding DNA strands are aligned
    # using Tcoffee and optimized using Gblocks
    for in_file in cli[NUCLEIC]:
        sequence_alignment(in_file)

    # amino acid sequences from coding DNA strand are aligned using
    # Tcoffee template-extrapolated structural alignment and
    # optimized using Gblocks
    for in_file in cli[AMINO]:
        structural_alignment(in_file)

